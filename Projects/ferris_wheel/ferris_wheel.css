.wheel {
	border: 2px solid black;
	border-radius: 50%;
	margin-left: 50px;
	position: absolute;
	height: 55vw;
	width: 55vw;
	max-width: 500px;
	max-height: 500px;
	animation-name: wheel;
	animation-duration: 10s; /* animation-duration:10s;  The time should be specified in either seconds (s) or milliseconds (ms).*/
	animation-iteration-count: infinite;
	animation-timing-function: linear;
  }
  
  .line {
	background-color: black;
	width: 50%;
	height: 2px;
	position: absolute;
	top: 50%;
	left: 50%;
	transform-origin: 0% 0%; /*This will offset the origin point by 0% from the left and 0% from the top, setting it to the top left corner of the element. The transform-origin property is used to set the point around which a CSS transformation is applied. For example, when performing a rotate, the transform-origin determines around which point the element is rotated.*/
  }
 
  .line:nth-of-type(2) {
	transform: rotate(60deg);
  }
  .line:nth-of-type(3) {
	transform: rotate(120deg);
  }
  .line:nth-of-type(4) {
	transform: rotate(180deg);
  }
  .line:nth-of-type(5) {
	transform: rotate(240deg);
  }
  .line:nth-of-type(6) {
	transform: rotate(300deg);
  }
  
  .cabin {
	background-color: red;
	width: 20%;
	height: 20%;
	position: absolute;
	border: 2px solid;
	transform-origin: 50% 0%; /*This will set the origin point to be offset 50% from the left and 0% from the top, placing it in the middle of the top edge of the element.*/
	animation: cabins 10s ease-in-out infinite;
  }
  
  .cabin:nth-of-type(1) {
	right: -8.5%;
	top: 50%;
  }
  .cabin:nth-of-type(2) {
	right: 17%;
	top: 93.5%;
  }
  .cabin:nth-of-type(3) {
	right: 67%;
	top: 93.5%;
  }
  .cabin:nth-of-type(4) {
	left: -8.5%;
	top: 50%;
  }
  .cabin:nth-of-type(5) {
	left: 17%;
	top: 7%;
  }
  .cabin:nth-of-type(6) {
	right: 17%;
	top: 7%;
  }

  footer{
	font-family: sans-serif;
	text-align: center;
	padding: 0.1rem 0;
	width: 100%;
	font-size: 62.5%;
	background-color: #dfdfe2;
	margin-top: 3%;
	position:fixed;
	bottom:0;
	left:0
  }

  /*The @keyframes at-rule is used to define the flow of a CSS animation. Within the @keyframes rule, selectors can be created for specific points in the animation sequence, such as 0% or 25%, or use from and to to define the start and end of the sequence. @keyframes rules require a name to be assigned to them, which can be sued in other rules to reference. */
  @keyframes wheel {
	 0% {
	   transform: rotate(0deg);
	 }
	 100% {
	   transform: rotate(360deg); /*By doing this, your animation will now complete a full rotation. The rotate() function will rotate the element based on the value provided in the parentheses. In this case, it will rotate the element 360 degrees.*/
	 }
  }
  
  @keyframes cabins {
	0% {
	  transform: rotate(0deg);
	}
	25% {
	  background-color: yellow;
	}
	50% {
	  background-color: purple;
	}
	   75% {
	  background-color: yellow;
	}
	100% {
	  transform: rotate(-360deg);
	}
  }