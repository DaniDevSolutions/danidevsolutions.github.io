*,
::before,
::after {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;/*This will set the default font size for the  web page to 10px (the browser default is 16px).*/
}

body {
  font-family: 'Baskervville', serif;/*'Baskervville', serif;  Font family names that contain spaces or special characters must be enclosed in quotes. Even though Baskervville doesn't contain spaces, it's good practice to always use quotes for consistency. It also is an external font loaded from Google. Generic font family names like serif, sans-serif, monospace, cursive, fantasy, and system-ui are keywords recognized by the browser, and they don't need to be enclosed in quotes because they don't refer to specific font names.*/
  color: linen;
  background-color: rgb(20, 30, 40);
}

h1 {
  font-family: 'Anton', sans-serif;
}

h2, h3, h4, h5, h6 {
  font-family: 'Raleway', sans-serif;
}

a {
  text-decoration: none;
  color: linen;
}

main {
  display: grid;/*CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and vertically while still retaining control to do things like overlap elements. CSS Grid is similar to Flexbox in that it has a special property for both the parent and child elements.*/
  grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);
  /*
  - grid-template-columns:1fr 94rem 1fr;   This will create three columns where the middle column is 94rem wide, and the first and last columns are both 1 fraction of the remaining space in the grid container.
  - grid-template-columns: minmax(2rem,1fr) minmax(min-content,94rem) minmax(2rem,1fr);
  This will create three columns where the middle column is 94rem wide, and the first and last columns are both a minimum of 2rem and a maximum of 1 fraction of the remaining space in the grid container. The middle column is set to a minimum width of min-content, which is the smallest width needed to display the content.*/
  row-gap: 3rem;/*To add space between rows in the grid layout*/
}

img {
  width: 100%;
  object-fit: cover; /*The object-fit property tells the browser how to position the element within its container. In this case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect ratio.*/
}

hr {
  margin: 1.5rem 0;
  border: 1px solid rgba(120, 120, 120, 0.6);/*alters the color of the hr element to a light gray*/
}

.heading {
  grid-column: 2 / 3;/*shorthand for grid-column-start and grid-column-end. The grid-column property tells the grid item which grid line to start and end at. In this case, the grid item will start at the second vertical grid line and end at the third vertical grid line.*/
  display: grid;
  grid-template-columns: repeat(2, 1fr);/*to create two columns of equal width*/
  row-gap: 1.5rem;
}

.text {
  grid-column: 2 / 3;
  font-size: 1.8rem;
  letter-spacing: 0.6px;
  column-width: 25rem; /*The .text element is not a CSS Grid, but  columns can be created within an element without using Grid by using the column-width property.*/
  text-align: justify;
}

.hero {
  grid-column: 1 / -1;
  position: relative;
}

.hero-title {
  text-align: center;
  color: orangered;
  font-size: 8rem;
}

.hero-subtitle {
  font-size: 2.4rem;
  color: orangered;
  text-align: center;
}

.author {
  font-size: 2rem;
  font-family: "Raleway", sans-serif;
}

.author-name a:hover {
  background-color: #306203;
}

.publish-date {
  color: rgba(255, 255, 255, 0.5);
}


.social-icons {
  display: grid;
  font-size: 3rem;
  grid-template-columns: repeat(5, 1fr);/*to arrange the icons in a single row.*/
  grid-auto-flow: column;/*This will automatically place the icons in a single row as an alternative to grid-template-columns. It uses an auto-placement algorithm to adjust the grid layout. Setting it to column will tell the algorithm to create new columns for content as needed. The dense value allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order.*/
  grid-auto-columns: 1fr;/*The algorithm defaults the new column width to be auto, which will not match your current columns. You can override this with the grid-auto-columns property. "grid-auto-columns:1fr;" will set the width of the columns to be equal.*/
  align-items: center;
}

/*The ::first-letter pseudo-selector allows you to target the first letter in the text content of an element.*/
.first-paragraph::first-letter {
  font-size: 6rem;
  color: orangered;
  /*The 2 following rules moves text into position and adds space between the first letter and the rest of the text.*/
  float: left;
  margin-right: 1rem;
}

.quote {
  color: #00beef;
  font-size: 2.4rem;
  text-align: center;
  font-family: "Raleway", sans-serif;
}

.quote::before {
  content: '" ';
}

.quote::after {
  content: ' "';
}

.text-with-images {
  display: grid;
  grid-template-columns: 1fr 2fr;
  column-gap: 3rem;
  margin-bottom: 3rem;
}

.lists {
  list-style-type: none;/*This will get rid of the bullet points on the list items.*/
  margin-top: 2rem;
}

.lists li {
  margin-bottom: 1.5rem;
}

.list-title, .list-subtitle {
  color: #00beef;
}

.image-wrapper {
  display: grid;
  grid-template-columns: 2fr 1fr;
  grid-template-rows: repeat(3, min-content);/* This will give our grid rows that adjust in height based on the content, but columns that remain a fixed width based on the container. (Step 73)*/
  gap: 2rem;/*If given two values, it sets the row-gap to the first value and the column-gap to the second. If given one value, it sets both the row-gap and column-gap to the same value.*/
  place-items: center;/*The place-items property can be used to set the align-items and justify-items values at the same time. The place-items property takes one or two values. If one value is provided, it is used for both the align-items and justify-items properties. If two values are provided, the first value is used for the align-items property and the second value is used for the justify-items property.*/
}

.image-1, .image-3 {
  grid-column: 1 / -1;/*This will allow the first and third images to span the full width of the grid. Or there may be times where you are unsure of how many columns your grid will have, but you want an element to stop at the last column. You can use the -1 keyword to tell the grid item to end at the last column.  */
}

footer{
  font-family: sans-serif;
  text-align: center;
  padding: 1rem 0;
  background-color: #333;
  /*position: fixed;
  bottom: 0;
  left: 0;*/
  width: 100%;
}

/*devices that are screens with a maximum width of 720px.*/
@media only screen and (max-width: 720px) {
  .image-wrapper {
    grid-template-columns: 1fr;/*This will collapse the three images into one column on smaller screens.*/
  }
}

@media only screen and (max-width: 600px) {
  .text-with-images {
    grid-template-columns: 1fr;/*This will collapse your bottom text area into a single column on smaller screens.*/
  }
}

@media only screen and (max-width: 550px) {
  .hero-title {
    font-size: 6rem;
  }
  
  .hero-subtitle,
  .author,
  .quote,
  .list-title {
    font-size: 1.8rem;
  }
  
  .social-icons {
    font-size: 2rem;
  }

  .text {
    font-size: 1.6rem;
  } 
}

@media only screen and (max-width: 420px){
    .hero-title {
    font-size: 4.5rem;
  }
}